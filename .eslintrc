{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "ignorePatterns": ["**/scripts/*.js", "cypress"],
  "plugins": ["@typescript-eslint", "react-hooks"],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "rules": {
    // turning this one off in case it conflicts with the typescript rules
    "no-unused-vars": "off",
    "react/jsx-no-leaked-render": "error",
    // this is commented out for now because it triggers a lot of warnings, we should fix it though.
    // "no-use-before-define": ["warn", { "functions": false, "classes": false, "variables": true }],
    // we are not reporting errors when destructuring and using ...rest, also will not report arguments with underscore (_,hey)
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }
    ],
    "import/no-anonymous-default-export": "off",
    // since we have a mixed codebase js/ts we will disable this rule and overide it to only run on ts tsx files , should be turned on when our codebase is 100% typescript
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off"
  },
  "overrides": [
    {
      // enable the rule specifically for TypeScript files
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": ["error"]
      }
    }
  ],
  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  }
}
